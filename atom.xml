<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://umeimmense.github.io</id>
    <title>Cool Coding</title>
    <updated>2022-04-17T05:23:02.260Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://umeimmense.github.io"/>
    <link rel="self" href="https://umeimmense.github.io/atom.xml"/>
    <logo>https://umeimmense.github.io/images/avatar.png</logo>
    <icon>https://umeimmense.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Cool Coding</rights>
    <entry>
        <title type="html"><![CDATA[如何 React Table 实现固定标题]]></title>
        <id>https://umeimmense.github.io/post/ru-he-reacttable-shi-xian-gu-ding-biao-ti</id>
        <link href="https://umeimmense.github.io/post/ru-he-reacttable-shi-xian-gu-ding-biao-ti">
        </link>
        <updated>2022-04-15T19:05:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在本节中中，我想向您展示如何使用带有固定标题的 React 表库。在前面的例子中，你已经安装了 React Table Library 来创建一个Table组件并给它一个主题。现在，我们将允许用户将他们的标题粘贴到顶部：</p>
<h2 id="实现">实现</h2>
<pre><code class="language-jsx">import { useTheme } from '@table-library/react-table-library/theme';

const App = () =&gt; {
  const data = { nodes };

  const theme = useTheme({
    Table: `
      height: 100%;
    `,
  });

  return (
    &lt;div
      style={{
        height: '150px',
      }}
    &gt;
      &lt;Table data={data} theme={theme}&gt;
        ...
      &lt;/Table&gt;
    &lt;/div&gt;
  );
};
</code></pre>
<p>固定Table标题所需的一切都是Table组件周围的容器组件。这样，Table的行将在垂直方向滚动，而标题保持在Table的顶部。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何在 React Table 使用主题]]></title>
        <id>https://umeimmense.github.io/post/ru-he-zai-react-table-shi-yong-zhu-ti</id>
        <link href="https://umeimmense.github.io/post/ru-he-zai-react-table-shi-yong-zhu-ti">
        </link>
        <updated>2022-04-15T13:39:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在本节中，我想向你展示如何使用 React Table Library 及其 useTheme 插件来使用自定义样式对你的表格进行主题化。在前面的例子中，你已经安装了 React Table Library 来创建一个Table 组件。</p>
<h2 id="实现">实现</h2>
<p>首先，导入 useTheme Hook：</p>
<pre><code class="language-jsx">import { useTheme } from '@table-library/react-table-library/theme';
</code></pre>
<p>其次，用它创建一个主题并将其作为Props传递给 Table 组件：</p>
<pre><code class="language-jsx">const THEME = {};

const App = () =&gt; {
  const data = { nodes };

  const theme = useTheme(THEME);

  return (
    &lt;Table data={data} theme={theme}&gt;
      ...
    &lt;/Table&gt;
  );
};
</code></pre>
<p>只需几行，你就为表格创建了一个自定义主题。但是，主题是空的，接下来让我们看看如何使用它来调整表格的样式：</p>
<pre><code class="language-jsx">const THEME = {
  HeaderRow: `
    font-size: 14px;

    background-color: #eaf5fd;
  `,
  Row: `
    font-size: 14px;

    &amp;:nth-child(odd) {
      background-color: #d2e9fb;
    }

    &amp;:nth-child(even) {
      background-color: #eaf5fd;
    }
  `,
};
</code></pre>
<p>本质上，主题是一本字典，你可以在其中设置表格的不同组件的样式。在最后一个示例中，我们设置了标题行和行组件的样式。由于两个组件共享一些相同的样式，你也可以将此样式提取为一个共同点：</p>
<pre><code class="language-jsx">const THEME = {
  BaseRow: `
    font-size: 14px;
  `,
  HeaderRow: `
    background-color: #eaf5fd;
  `,
  Row: `
    &amp;:nth-child(odd) {
      background-color: #d2e9fb;
    }

    &amp;:nth-child(even) {
      background-color: #eaf5fd;
    }
  `,
};
</code></pre>
<p>以下组件可用作样式键：Table、HeaderRow、Row、HeaderCell、Cell、BaseRow、BaseCell。最后，这应该为你提供所有入口点，以便为表格设置所有不同组件的样式。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何创建 React Table 组件]]></title>
        <id>https://umeimmense.github.io/post/ru-he-chuang-jian-react-table-zu-jian</id>
        <link href="https://umeimmense.github.io/post/ru-he-chuang-jian-react-table-zu-jian">
        </link>
        <updated>2022-04-15T12:39:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在本节中，我想向你展示如何使用 React Table​​库在 React 中创建Table组件。在本节之后，你可以使用库的文档继续构建许多其他示例，例如搜索、过滤、排序、选择、嵌套树表或 React 表的分页功能。但让我们从基础开始。</p>
<h2 id="实现">实现</h2>
<p>让我们从通过命令行安装 React Table Library ：</p>
<pre><code class="language-shell">npm install @table-library/react-table-library @emotion/react
</code></pre>
<p>任务是在 React Table​​组件中显示以下项列表：</p>
<pre><code class="language-js">const list = [
  {
    id: '1',
    name: 'VSCode',
    deadline: new Date(2022, 1, 17),
    type: 'SETUP',
    isComplete: true,
  },
  {
    id: '2',
    name: 'JavaScript',
    deadline: new Date(2022, 2, 28),
    type: 'LEARN',
    isComplete: true,
  },
  {
    id: '3',
    name: 'React',
    deadline: new Date(2022, 3, 8),
    type: 'LEARN',
    isComplete: false,
  }
];
</code></pre>
<p>我们将从在 Table 组件可以使用的对象中构建列表开始。组件本身从库中导入：</p>
<pre><code class="language-jsx">import * as React from 'react';
import { Table } from '@table-library/react-table-library/table';

const list = [ ... ];

const App = () =&gt; {
  const data = { nodes: list };

  return &lt;Table data={data}&gt;{(tableList) =&gt; null}&lt;/Table&gt;;
};
</code></pre>
<p>Table 组件接受一个数据对象作为带有节点属性的Props。这些节点是我们列表中的项，但是，该表使其对节点的命名更加通用，因为该表不仅可以显示列表结构，还可以显示树结构。</p>
<p>此外，Table 组件使用一个子函数作为子函数，它使我们能够以 tableList 的形式访问表中的列表。在内部，表格组件将各种修改应用于我们的列表——例如排序、分页等，如果启用了这些插件 - 因此应该使用 tableList（而不是数据或列表）来呈现表中的项。</p>
<p>React Table 库使用组合而不是配置。因此，你可以从库本身获得所有必要的构建块作为组件。让我们从表格的标题开始：</p>
<pre><code class="language-jsx">import * as React from 'react';
import {
  Table,
  Header,
  HeaderRow,
  HeaderCell,
} from '@table-library/react-table-library/table';

const list = [ ... ];

const App = () =&gt; {
  const data = { nodes: list };

  return (
    &lt;Table data={data}&gt;
      {(tableList) =&gt; (
        &lt;Header&gt;
          &lt;HeaderRow&gt;
            &lt;HeaderCell&gt;Task&lt;/HeaderCell&gt;
            &lt;HeaderCell&gt;Deadline&lt;/HeaderCell&gt;
            &lt;HeaderCell&gt;Type&lt;/HeaderCell&gt;
            &lt;HeaderCell&gt;Complete&lt;/HeaderCell&gt;
          &lt;/HeaderRow&gt;
        &lt;/Header&gt;
      )}
    &lt;/Table&gt;
  );
};
</code></pre>
<p>通过使用这些组件，你可以将表创建为组件的组合，而每个组件都有自己的职责。例如，我们不是只有一个 Table 组件可以接受一个大型配置对象，而是有可组合的组件——例如 Header、HeaderRow 和 HeaderCell，它们可以接收专用的 props。</p>
<p>接下来，让我们像在 React 中渲染列表时所习惯的那样显示我们的项，方法是渲染 Row 组件，并为 Body 组件中的每个项提供一个键：</p>
<pre><code class="language-jsx">import * as React from 'react';
import {
  Table,
  Header,
  HeaderRow,
  HeaderCell,
  Body,
  Row,
  Cell,
} from '@table-library/react-table-library/table';

const list = [ ... ];

const App = () =&gt; {
  const data = { nodes: list };

  return (
    &lt;Table data={data}&gt;
      {(tableList) =&gt; (
        &lt;&gt;
          &lt;Header&gt;
            ...
          &lt;/Header&gt;

          &lt;Body&gt;
            {tableList.map((item) =&gt; (
              &lt;Row key={item.id} item={item}&gt;
                &lt;Cell&gt;{item.name}&lt;/Cell&gt;
                &lt;Cell&gt;
                  {item.deadline.toLocaleDateString(
                    'en-US',
                    {
                      year: 'numeric',
                      month: '2-digit',
                      day: '2-digit',
                    }
                  )}
                &lt;/Cell&gt;
                &lt;Cell&gt;{item.type}&lt;/Cell&gt;
                &lt;Cell&gt;{item.isComplete.toString()}&lt;/Cell&gt;
              &lt;/Row&gt;
            ))}
          &lt;/Body&gt;
        &lt;/&gt;
      )}
    &lt;/Table&gt;
  );
};
</code></pre>
<p>由于你可以完全控制在 Cell 组件中呈现的内容，因此你可以根据需要格式化数据。布尔值可以转换为字符串，日期可以格式化为可读版本。 Cell 组件没有特殊的props来完成渲染。使用 React 表格​​库可以直接在 React 中呈现表格组件。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义React Hook：获取滚动条宽度]]></title>
        <id>https://umeimmense.github.io/post/zi-ding-yi-react-hookhuo-qu-gun-dong-tiao-kuan-du</id>
        <link href="https://umeimmense.github.io/post/zi-ding-yi-react-hookhuo-qu-gun-dong-tiao-kuan-du">
        </link>
        <updated>2022-04-14T08:02:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>本节实现一个简洁的自定义 React Hook，它可以让你获得滚动条的宽度。你可以在任何 React 组件中使用它，它会返回这个特定浏览器（和操作系统）的滚动条的宽度：</p>
<pre><code class="language-jsx">import * as React from 'react';

export const useScrollbarWidth = () =&gt; {
  const didCompute = React.useRef(false);
  const widthRef = React.useRef(0);

  if (didCompute.current) return widthRef.current;

  // Creating invisible container
  const outer = document.createElement('div');
  outer.style.visibility = 'hidden';
  outer.style.overflow = 'scroll'; // forcing scrollbar to appear
  outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps
  document.body.appendChild(outer);

  // Creating inner element and placing it in the container
  const inner = document.createElement('div');
  outer.appendChild(inner);

  // Calculating difference between container's full width and the child width
  const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;

  // Removing temporary elements from the DOM
  outer.parentNode.removeChild(outer);

  didCompute.current = true;
  widthRef.current = scrollbarWidth;

  return scrollbarWidth;
};
</code></pre>
<p>本质上，自定义Hook只是将隐藏的滚动条呈现到项目中，对其进行测量，然后再次将其删除。之后它返回结果。</p>
<p>作为替代方案，如果你希望在水平滚动容器的情况下使用高度而不是滚动条的宽度，则只需将宽度属性替换为高度属性。</p>
<p>就我个人而言，我自己从未遇到过这个问题，但是，当我们在客户端机器上测试应用程序时，在某些情况下滚动条没有覆盖并占用空间。通常这没关系，但是，我们遇到了一些用例，我们必须拥有滚动条的大小才能解决有关应用程序布局的问题。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义React Hook：获取滚动方向]]></title>
        <id>https://umeimmense.github.io/post/zi-ding-yi-react-hookhuo-qu-gun-dong-fang-xiang</id>
        <link href="https://umeimmense.github.io/post/zi-ding-yi-react-hookhuo-qu-gun-dong-fang-xiang">
        </link>
        <updated>2022-04-14T08:01:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>本节我们实现一个简洁的自定义 React Hook，它可以检测用户的滚动方向：</p>
<pre><code class="language-jsx">import * as React from 'react';

const THRESHOLD = 0;

const useScrollDirection = () =&gt; {
  const [scrollDirection, setScrollDirection] = React.useState('up');

  const blocking = React.useRef(false);
  const prevScrollY = React.useRef(0);

  React.useEffect(() =&gt; {
    prevScrollY.current = window.pageYOffset;

    const updateScrollDirection = () =&gt; {
      const scrollY = window.pageYOffset;

      if (Math.abs(scrollY - prevScrollY.current) &gt;= THRESHOLD) {
        const newScrollDirection =
          scrollY &gt; prevScrollY.current ? 'down' : 'up';

        setScrollDirection(newScrollDirection);

        prevScrollY.current = scrollY &gt; 0 ? scrollY : 0;
      }

      blocking.current = false;
    };

    const onScroll = () =&gt; {
      if (!blocking.current) {
        blocking.current = true;
        window.requestAnimationFrame(updateScrollDirection);
      }
    };

    window.addEventListener('scroll', onScroll);

    return () =&gt; window.removeEventListener('scroll', onScroll);
  }, [scrollDirection]);

  return scrollDirection;
};

export { useScrollDirection };
</code></pre>
<p>在一个函数组件中，自定义的 React Hook可以这样使用：</p>
<pre><code class="language-jsx">import * as React from 'react';

import { useScrollDirection } from './useScrollDirection';

const App = () =&gt; {
  const scrollDirection = useScrollDirection(ref);
  console.log('up');

  return (...);
};
</code></pre>
<p>最后，可能有很多方法可以改进这个自定义Hook（例如，检查水平而不是垂直滚动方向）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义React Hook：检查是否溢出]]></title>
        <id>https://umeimmense.github.io/post/zi-ding-yi-react-hookjian-cha-shi-fou-yi-chu</id>
        <link href="https://umeimmense.github.io/post/zi-ding-yi-react-hookjian-cha-shi-fou-yi-chu">
        </link>
        <updated>2022-04-14T08:01:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>本节我们实现一个简洁的自定义 React Hook，它检查元素的内容是否溢出（这里：垂直溢出）：</p>
<pre><code class="language-jsx">import * as React from 'react';

export const useIsOverflow = (ref, callback) =&gt; {
  const [isOverflow, setIsOverflow] = React.useState(undefined);

  React.useLayoutEffect(() =&gt; {
    const { current } = ref;

    const trigger = () =&gt; {
      const hasOverflow = current.scrollHeight &gt; current.clientHeight;

      setIsOverflow(hasOverflow);

      if (callback) callback(hasOverflow);
    };

    if (current) {
      trigger();
    }
  }, [callback, ref]);

  return isOverflow;
};
</code></pre>
<p>如果你想检测水平溢出，可以将 hasOverflow 分配交换为以下内容：</p>
<pre><code class="language-jsx">const hasOverflow = current.scrollWidth &gt; current.clientWidth;
</code></pre>
<p>在一个函数组件中，自定义的 React Hook可以这样使用：</p>
<pre><code class="language-jsx">import * as React from 'react';

import { useIsOverflow } from './useIsOverflow';

const App = () =&gt; {
  const ref = React.useRef();
  const isOverflow = useIsOverflow(ref);

  console.log(isOverflow);
  // true

  return (
    &lt;div style={{ overflow: 'auto', height: '100px' }} ref={ref}&gt;
      &lt;div style={{ height: '200px' }}&gt;Hello React&lt;/div&gt;
    &lt;/div&gt;
  );
};
</code></pre>
<p>Hook第一次返回未定义，因为状态尚未设置。</p>
<p>自定义Hook还接受一个可选的回调函数，该函数在检查溢出后触发：</p>
<pre><code class="language-jsx">const App = () =&gt; {
  const ref = React.useRef();
  const isOverflow = useIsOverflow(ref, (isOverflowFromCallback) =&gt; {
    console.log(isOverflowFromCallback);
    // true
  });

  console.log(isOverflow);
  // true

  return (
    &lt;div style={{ overflow: 'auto', height: '100px' }} ref={ref}&gt;
      &lt;div style={{ height: '200px' }}&gt;Hello React&lt;/div&gt;
    &lt;/div&gt;
  );
};
</code></pre>
<p>如果元素的大小发生变化，你可以调整自定义Hook以再次检查验证溢出，但前提是浏览器支持 ResizeObserver：</p>
<pre><code class="language-jsx">import * as React from 'react';

export const useIsOverflow = (ref, callback) =&gt; {
  const [isOverflow, setIsOverflow] = React.useState(undefined);

  React.useLayoutEffect(() =&gt; {
    const { current } = ref;

    const trigger = () =&gt; {
      const hasOverflow = current.scrollHeight &gt; current.clientHeight;

      setIsOverflow(hasOverflow);

      if (callback) callback(hasOverflow);
    };

    if (current) {
      if ('ResizeObserver' in window) {
        new ResizeObserver(trigger).observe(current);
      }

      trigger();
    }
  }, [callback, ref]);

  return isOverflow;
};
</code></pre>
<p>最后，可能有很多方法可以改进这个自定义Hook（例如，在自定义Hook中初始化 ref 并从自定义Hook返回它以将其附加到元素，只触发一次自定义Hook）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义React Hook：使用LocalStorage]]></title>
        <id>https://umeimmense.github.io/post/zi-ding-yi-react-hookshi-yong-localstorage</id>
        <link href="https://umeimmense.github.io/post/zi-ding-yi-react-hookshi-yong-localstorage">
        </link>
        <updated>2022-04-14T08:00:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="实现-uselocalstorage">实现 useLocalStorage</h2>
<p>一个简洁的自定义 React Hook，展示了如何在 React 中使用本地存储来存储状态。你可以在任何 React 组件中使用它，它允许你在本地存储中写入和读取状态：</p>
<pre><code class="language-jsx">import * as React from 'react';

const useLocalStorage = (storageKey, fallbackState) =&gt; {
  const [value, setValue] = React.useState(
    JSON.parse(localStorage.getItem(storageKey)) ?? fallbackState
  );

  React.useEffect(() =&gt; {
    localStorage.setItem(storageKey, JSON.stringify(value));
  }, [value, storageKey]);

  return [value, setValue];
};

const App = () =&gt; {
  const [isOpen, setOpen] = useLocalStorage('is-open', false);

  const handleToggle = () =&gt; {
    setOpen(!isOpen);
  };

  return (
    &lt;div&gt;
      &lt;button onClick={handleToggle}&gt;Toggle&lt;/button&gt;
      {isOpen &amp;&amp; &lt;div&gt;Content&lt;/div&gt;}
    &lt;/div&gt;
  );
};

export default App;
</code></pre>
<p>本地存储Hook只是作为一种学习体验。如果你在生产环境中依赖 React 应用程序的本地存储，你应该检查更广泛使用的Hook（因此是健壮的）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义React Hook：检测组件外部的点击]]></title>
        <id>https://umeimmense.github.io/post/zi-ding-yi-react-hookjian-ce-zu-jian-wai-bu-de-dian-ji</id>
        <link href="https://umeimmense.github.io/post/zi-ding-yi-react-hookjian-ce-zu-jian-wai-bu-de-dian-ji">
        </link>
        <updated>2022-04-14T08:00:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>本章我们一起来聊聊如何创建自定义 React Hook来检测 React 组件外部的点击。例如，你可能希望为各种组件（如对话框或下拉菜单）提供此类自定义 React Hook，因为当用户单击它们外部时它们应该关闭。所以我们需要一种方法来找出这个外部点击。<br>
在这里学到的大部分内容都可以追溯到 JavaScript 中事件冒泡和捕获的概念。因此，如果你需要对冒泡、目标和捕获阶段进行复习，我建议你阅读以下文章，之前该文章涉及 React 的这个主题。</p>
<h2 id="实现">实现</h2>
<p>让我们从 React 中的一个函数组件开始，我们使用 React 的 useState Hook 和一个事件处理程序来增加一个计数器：</p>
<pre><code class="language-jsx">import * as React from 'react';

const style = {
  padding: '10px',
  border: '1px solid black',
  display: 'flex',
  justifyContent: 'flex-end',
};

function App() {
  const [count, setCount] = React.useState(0);

  const handleClick = () =&gt; {
    setCount((state) =&gt; state + 1);
  };

  return (
    &lt;div style={style}&gt;
      &lt;button type=&quot;button&quot; onClick={handleClick}&gt;
        Count: {count}
      &lt;/button&gt;
    &lt;/div&gt;
  );
}

export default App;
</code></pre>
<p>一切都按预期工作。接下来，我们要在用户单击按钮外部时重置状态（此处为：计数）。我们可以编写用于重置状态的事件处理程序，但是尚不清楚在哪里使用它：</p>
<pre><code class="language-jsx">function App() {
  const [count, setCount] = React.useState(0);

  const handleClickOutside = () =&gt; {
    setCount(0);
  };

  const handleClick = () =&gt; {
    setCount((state) =&gt; state + 1);
  };

  return (
    &lt;div style={style}&gt;
      &lt;button type=&quot;button&quot; onClick={handleClick}&gt;
        Count: {count}
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>一种原始的方法是在顶级组件的最外层 HTML 元素（这里：<div>）上使用这个新的处理程序。但是，更好的方法是在文档级别使用此事件处理程序作为最佳实践，因为最外层的 HTML 元素可能会在开发过程中发生变化。<br>
我们将直接在自定义Hook中实现这一点，以避免冗余重构：</p>
<pre><code class="language-jsx">const useOutsideClick = (callback) =&gt; {
  const ref = React.useRef();

  React.useEffect(() =&gt; {
    const handleClick = (event) =&gt; {
      callback();
    };

    document.addEventListener('click', handleClick);

    return () =&gt; {
      document.removeEventListener('click', handleClick);
    };
  }, []);

  return ref;
};
</code></pre>
<p>自定义Hook会启动一个最终返回的 React ref。它还没有真正用在Hook的实现细节中。此外，自定义Hook使用 React 的 useEffect Hook在文档级别分配（和删除）一个事件监听器（这里：单击事件）。毕竟，每当单击文档时，处理程序以及传递的回调函数都会运行。</p>
<p>现在自定义Hook可以在我们的 React 组件中以下列方式使用：将事件处理程序作为回调函数传递给Hook——只要单击文档就会执行。此外，使用返回的引用（此处为：ref）并将其分配给按钮 HTML 元素：</p>
<pre><code class="language-jsx">function App() {
  const [count, setCount] = React.useState(0);

  const handleClickOutside = () =&gt; {
    setCount(0);
  };

  const ref = useOutsideClick(handleClickOutside);

  const handleClick = () =&gt; {
    setCount((state) =&gt; state + 1);
  };

  return (
    &lt;div style={style}&gt;
      &lt;button ref={ref} type=&quot;button&quot; onClick={handleClick}&gt;
        Count: {count}
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>但是，你会注意到，处理程序将始终触发，即使在单击按钮本身时也是如此。如果你再次检查自定义Hook，你将看到该引用（ref）并没有真正在其中使用。我们想要完成的事情：仅在单击传递的 ref（此处表示按钮）之外的任何内容时执行回调函数，而不是在单击 ref 本身（或其内容）时执行回调函数：</p>
<pre><code class="language-jsx">const useOutsideClick = (callback) =&gt; {
  const ref = React.useRef();

  React.useEffect(() =&gt; {
    const handleClick = (event) =&gt; {
      if (ref.current &amp;&amp; !ref.current.contains(event.target)) {
        callback();
      }
    };

    document.addEventListener('click', handleClick);

    return () =&gt; {
      document.removeEventListener('click', handleClick);
    };
  }, [ref]);

  return ref;
};
</code></pre>
<p>就是这样。分配给按钮的引用是触发按钮的事件处理程序和文档的事件处理程序之间的边界。在参考之外点击的所有内容都将被视为外部点击。</p>
<p>但是缺少一个小的改进：如果我们需要通过在事件处理程序上使用 stopPropagation() 方法来停止某些边缘情况下的事件冒泡怎么办。例如，在下面我们通过单击容器元素来扩展组件并在那里停止事件的传播：</p>
<pre><code class="language-jsx">const style = {
  padding: '10px',
  border: '1px solid black',
  display: 'flex',
  justifyContent: 'space-between',
};

...

function App() {
  const [count, setCount] = React.useState(0);

  const handleClickOutside = () =&gt; {
    setCount(0);
  };

  const ref = useOutsideClick(handleClickOutside);

  const handleClick = () =&gt; {
    setCount((state) =&gt; state + 1);
  };

  const handleHeaderClick = (event) =&gt; {
    // do something

    event.stopPropagation();
  };

  return (
    &lt;div style={style} onClick={handleHeaderClick}&gt;
      &lt;div&gt;Header&lt;/div&gt;
      &lt;button ref={ref} type=&quot;button&quot; onClick={handleClick}&gt;
        Count: {count}
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>当我们尝试这个例子时，我们会看到容器上的点击不会作为“外部点击”，因为即使它是外部点击，由于事件停止冒泡，它永远不会到达文档的事件侦听器。</p>
<p>通过使用冒泡和捕获阶段，我们可以调整自定义Hook以在捕获阶段触发。因为捕获阶段发生在冒泡阶段之前，所以即使事件在冒泡阶段停止传播，对文档的点击也将始终运行：</p>
<pre><code class="language-jsx">const useOutsideClick = (callback) =&gt; {
  const ref = React.useRef();

  React.useEffect(() =&gt; {
    const handleClick = (event) =&gt; {
      if (ref.current &amp;&amp; !ref.current.contains(event.target)) {
        callback();
      }
    };

    document.addEventListener('click', handleClick, true);

    return () =&gt; {
      document.removeEventListener('click', handleClick, true);
    };
  }, [ref]);

  return ref;
};
</code></pre>
<p>就是这样。你创建了一个自定义挂钩来检测引用的组件/元素之外的点击。建议你再次阅读事件冒泡和捕获文章，以更深入地解释这些阶段发生的事情。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何创建自定义 React Hook ]]></title>
        <id>https://umeimmense.github.io/post/ru-he-chuang-jian-zi-ding-yi-react-hook</id>
        <link href="https://umeimmense.github.io/post/ru-he-chuang-jian-zi-ding-yi-react-hook">
        </link>
        <updated>2022-04-13T07:35:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>React 很久以前就引入了 Hooks。随着 Hooks 的发布，函数组件能够使用内置 Hooks 的状态和副作用，例如 React 的 useState Hook 和 React 的 useEffect Hook。<br>
不过，React 只提供了少数内置 Hook（例如 useReducer、useCallback、useMemo、useContext）。但是，通过使用这些 Hooks 作为基础，React 开发人员可以创建自己的称为自定义 Hooks 的 Hooks。</p>
<p>在我们创建自定义Hook之前，你需要知道创建一个有两个规则：</p>
<ul>
<li>自定义 Hooks 以“use”为前缀命名。例如，自定义Hook可以命名为 useLocalStorage 或 useAuthentication。在我们的例子中，自定义Hook将被命名为 useBoolean。</li>
<li>自定义 Hooks 由内置的 React Hooks 或其他自定义 Hooks 组成。因此，自定义 Hook 始终是一个或多个 Hook 的新组合。如果自定义 Hook 在内部不使用任何Hook，则它不是自定义 Hook，不应具有前缀“use”。</li>
</ul>
<h2 id="自定义hook">自定义Hook</h2>
<p>我们将创建一个名为 useBoolean 的自定义 Hook，让我们看看它为我们解决了什么问题。让我们从一个小例子开始：</p>
<pre><code class="language-jsx">import * as React from 'react';

function App() {
  const [isToggle, setToggle] = React.useState(false);

  const handleToggle = () =&gt; setToggle(!isToggle);

  return (
    &lt;div&gt;
      &lt;button type=&quot;button&quot; onClick={handleToggle}&gt;
        Toggle
      &lt;/button&gt;

      {isToggle.toString()}
    &lt;/div&gt;
  );
}

export default App;
</code></pre>
<p>该组件呈现一个用于切换布尔值的按钮。在React 应用程序中，要么切换它（如上一个示例），要么将其显式设置为 true 或 false（如下一个示例）：</p>
<pre><code class="language-jsx">import * as React from 'react';

function App() {
  const [isToggle, setToggle] = React.useState(false);

  const handleToggle = () =&gt; setToggle(!isToggle);
  const handleTrue = () =&gt; setToggle(true);
  const handleFalse = () =&gt; setToggle(false);

  return (
    &lt;div&gt;
      &lt;button type=&quot;button&quot; onClick={handleToggle}&gt;
        Toggle
      &lt;/button&gt;
      &lt;button type=&quot;button&quot; onClick={handleTrue}&gt;
        To True
      &lt;/button&gt;
      &lt;button type=&quot;button&quot; onClick={handleFalse}&gt;
        To False
      &lt;/button&gt;

      {isToggle.toString()}
    &lt;/div&gt;
  );
}

export default App;
</code></pre>
<p>一些观点可能会争辩说，我们本可以使用内联处理程序，这样就不会有事件处理程序的重复声明。然而，我个人尽量避免使用内联处理程序，因为它们向 JSX 注入了太多逻辑，而应该在组件的函数签名和返回语句之间定义。但这只是个人喜好。<br>
无论如何，每次使用有状态布尔值时，都会遇到相同的实现细节：要么切换布尔值，要么将其设置为两个可能值之一。为了在多个 React 组件中使用有状态布尔值时屏蔽这些重复代码，我开始为它创建一个自定义Hook：</p>
<pre><code class="language-jsx">const useBoolean = () =&gt; {
  const [state, setState] = React.useState();

  const handleTrue = () =&gt; setState(true);
  const handleFalse = () =&gt; setState(false);
  const handleToggle = () =&gt; setState(!state);

  return [
    state,
    {
      setTrue: handleTrue,
      setFalse: handleFalse,
      setToggle: handleToggle,
    },
  ];
};
</code></pre>
<p>基本上所有实现细节，即状态和事件处理程序，都移到了这个名为 useBoolean 的自定义Hook中。此外，自定义Hook返回状态和更新数组中状态的函数。<br>
从自定义Hook返回多个值时，返回一个数组是最佳实践，因为 React 的内置 Hooks（在返回多个值的情况下）利用了数组，因此也使用了数组解构。使用数组解构的好处是可以为解构的值赋予任何名称（在对象解构的情况下，代码比重命名值要少）。</p>
<pre><code class="language-jsx">const useBoolean = (initialState = false) =&gt; {
  const [state, setState] = React.useState(initialState);

  const handleTrue = () =&gt; setState(true);
  const handleFalse = () =&gt; setState(false);
  const handleToggle = () =&gt; setState(!state);

  return [
    state,
    {
      setTrue: handleTrue,
      setFalse: handleFalse,
      setToggle: handleToggle,
    },
  ];
};
</code></pre>
<p>一个很好的补充是也添加一个初始状态（如最后一个代码片段所示）。回到我们的 App 组件，我们可以通过向它传递初始状态并使用它的返回值来显示状态并更新它来使用这个新的自定义Hook：</p>
<pre><code class="language-jsx">function App() {
  const [isToggle, { setToggle }] = useBoolean(false);

  return (
    &lt;div&gt;
      &lt;button type=&quot;button&quot; onClick={setToggle}&gt;
        Toggle
      &lt;/button&gt;

      {isToggle.toString()}
    &lt;/div&gt;
  );
}
</code></pre>
<p>由于自定义Hook不仅提供了切换有状态布尔值的功能，而且还可以将其显式设置为True或False，我们也可以使用这些功能：</p>
<pre><code class="language-jsx">function App() {
  const [isToggle, {
    setToggle,
    setTrue,
    setFalse,
  }] = useBoolean(false);

  return (
    &lt;div&gt;
      &lt;button type=&quot;button&quot; onClick={setToggle}&gt;
        Toggle
      &lt;/button&gt;
      &lt;button type=&quot;button&quot; onClick={setTrue}&gt;
        To True
      &lt;/button&gt;
      &lt;button type=&quot;button&quot; onClick={setFalse}&gt;
        To False
      &lt;/button&gt;

      {isToggle.toString()}
    &lt;/div&gt;
  );
}
</code></pre>
<p>本质上，我们将有状态的布尔值和所有在布尔值上运行的事件处理程序提取到一个自定义Hook中。通过每次我们需要一个有状态的布尔值时使用这个自定义钩子，我们可以节省定义事件处理程序，其中包括有关如何操作布尔值的实现细节，而不是使用从钩子返回的函数。</p>
<p>总之，我们已经学习了如何使用 React 的内置 Hook 之一（称为 useState）来创建自定义钩子。这个自定义钩子并不复杂，但是，它应该向你展示如何减少 React 项目中的复杂性和冗余。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React中的事件处理]]></title>
        <id>https://umeimmense.github.io/post/react-de-shi-jian-chu-li</id>
        <link href="https://umeimmense.github.io/post/react-de-shi-jian-chu-li">
        </link>
        <updated>2022-04-12T08:18:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在本节中，我们将了解 React 中用于 HTML 元素（例如按钮和输入元素）的事件处理程序。你将学习如何使用带有 onClick 事件的按钮，以及如何定义和使用不同类型的事件处理程序。本质上，我们将介绍三种事件处理程序：事件处理程序、内联事件处理程序和回调事件处理程序。</p>
<h2 id="react中的事件处理程序">React中的事件处理程序</h2>
<p>首先，我们将从 React 中针对特定 onClick 事件处理程序的按钮示例开始。这是关于如何在 React 中使用事件处理程序（也称为事件处理程序函数或处理程序）处理事件的最基本示例。按钮具有接收函数的 onClick 属性。每次触发事件时都会调用此函数（此处：单击按钮时）：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  function handleClick() {
    console.log('Button click ...');
  }

  return (
    &lt;div&gt;
      &lt;button type=&quot;button&quot; onClick={handleClick}&gt;
        Event Handler
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>对于其他属性，如 onChange（onChange 事件处理程序）和 onSubmit（onSubmit 事件处理程序），它的工作方式类似。对于初学者来说，onClick 经常不起作用，因为他们没有传递函数，而是直接在 JSX 中调用函数。例如，在下一个版本中，事件处理程序仅在第一次渲染组件时被调用一次。其他每一次单击都不会调用事件处理函数，因为函数的返回值用于 onClick 属性而不是函数本身。所以没有什么可调用的；除非函数返回另一个函数：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  function handleClick() {
    console.log('Button click ...');
  }

  // don't do this
  return (
    &lt;div&gt;
      &lt;button type=&quot;button&quot; onClick={handleClick()}&gt;
        Event Handler
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>通过使用 JavaScript 箭头函数，可以使事件处理函数更加简洁。不过，这是一个可选步骤。就个人而言，我喜欢将事件处理程序作为箭头函数：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  const handleClick = () =&gt; {
    console.log('Button click ...');
  };

  return (
    &lt;div&gt;
      &lt;button type=&quot;button&quot; onClick={handleClick}&gt;
        Event Handler
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>但是一旦更多的事件处理程序在 React 组件中添加，通过再次给它们函数语句来使它们与其他变量更容易区分是很好的：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  const user = {
    id: '123abc',
    username: 'Robin Wieruch',
  };

  function handleUserSignIn() {
    // do something
  }

  function handleUserSignUp() {
    // do something
  }

  function handleUserSignOut() {
    // do something
  }

  ...
}
</code></pre>
<p>毕竟，onClick 事件的事件处理程序应该实现一些业务逻辑。在本例中，React 的 useState Hook 用于通过 onClick 按钮事件更新某些状态：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  const [count, setCount] = React.useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    &lt;div&gt;
      Count: {count}

      &lt;button type=&quot;button&quot; onClick={handleClick}&gt;
        Increase Count
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>下一个示例向你展示了一个输入字段而不是一个按钮。在那里，我们使用的是始终作为第一个参数传递给事件处理函数的实际事件。该事件是来自 React 的合成事件，它本质上封装了原生 HTML 事件并在其之上添加了一些功能。每次有人使用事件的目标属性输入输入字段时，此事件都会为你提供输入字段的值：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  const [text, setText] = React.useState('');

  function handleChange(event) {
    setText(event.target.value);
  }

  return (
    &lt;div&gt;
      &lt;input type=&quot;text&quot; onChange={handleChange} /&gt;

      {text}
    &lt;/div&gt;
  );
}
</code></pre>
<p>以前我们没有使用过该事件，因为在我们的按钮示例中我们不需要它。在输入字段示例中，我们需要它。最后但同样重要的是，不要忘记将值传递给输入元素以使其成为受控组件：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  const [text, setText] = React.useState('');

  function handleChange(event) {
    setText(event.target.value);
  }

  return (
    &lt;div&gt;
      &lt;input type=&quot;text&quot; value={text} onChange={handleChange} /&gt;

      {text}
    &lt;/div&gt;
  );
}
</code></pre>
<p>简而言之，这就是事件处理程序。让我们了解 React 中更高级的处理程序。</p>
<h2 id="react-中的内联事件处理程序">React 中的内联事件处理程序</h2>
<p>内联事件处理程序，也称为内联处理程序，通过直接在 JSX 中使用事件处理程序为我们提供了许多新选项：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  const [count, setCount] = React.useState(0);

  return (
    &lt;div&gt;
      Count: {count}

      &lt;button
        type=&quot;button&quot;
        onClick={function() {
          setCount(count + 1);
        }}
      &gt;
        Increase Count
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>在 JSX 中使用通用函数语句虽然很冗长。因此，JavaScript 箭头函数可以方便地定义更简洁的内联处理程序：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  const [count, setCount] = React.useState(0);

  return (
    &lt;div&gt;
      Count: {count}

      &lt;button
        type=&quot;button&quot;
        onClick={() =&gt; setCount(count + 1)}
      &gt;
        Increase Count
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>一般来说，开发者都是懒惰的人，所以经常使用内联事件处理程序来避免在 JSX 之外进行额外的函数声明。然而，这会将大量业务逻辑转移到 JSX 中，这使得它的可读性、可维护性和易错性降低。就个人而言，我喜欢在没有内联事件处理程序的情况下保持 JSX 干净，并在 JSX 之外声明事件处理程序。<br>
内联处理程序也用于将参数传递给在 JSX 之外定义的更通用的处理程序：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  const [count, setCount] = React.useState(0);

  function handleCount(delta) {
    setCount(count + delta);
  }

  return (
    &lt;div&gt;
      Count: {count}

      &lt;button type=&quot;button&quot; onClick={() =&gt; handleCount(1)}&gt;
        Increase Count
      &lt;/button&gt;
      &lt;button type=&quot;button&quot; onClick={() =&gt; handleCount(-1)}&gt;
        Decrease Count
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>这样，也可以并行传递事件和参数。即使在此示例中不需要它，但你肯定会在将来遇到需要该事件的一种或另一种情况（例如 React Forms 的 preventDefault ）：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  const [count, setCount] = React.useState(0);

  function handleCount(event, delta) {
    setCount(count + delta);
  }

  return (
    &lt;div&gt;
      Count: {count}

      &lt;button type=&quot;button&quot; onClick={event =&gt; handleCount(event, 1)}&gt;
        Increase Count
      &lt;/button&gt;
      &lt;button type=&quot;button&quot; onClick={event =&gt; handleCount(event, -1)}&gt;
        Decrease Count
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>因此，当你需要传递事件和参数时，例如当你需要为 onClick 事件提供额外参数时，内联事件处理程序可能会为你提供帮助。然后 JSX 之外的更通用的事件处理程序可以使用这个额外的参数。</p>
<h2 id="react-中的回调事件处理程序">React 中的回调事件处理程序</h2>
<p>简而言之，有回调事件处理程序或回调处理程序。当子组件需要与父组件通信时使用它们。由于 React props 只在组件树中向下传递，因此使用回调处理程序（其核心是一个函数）进行向上通信：</p>
<pre><code class="language-jsx">import React from 'react';

function App() {
  const [text, setText] = React.useState('');

  // 1
  function handleTextChange(event) {
    setText(event.target.value); // 3
  }

  return (
    &lt;div&gt;
      &lt;MyInput inputValue={text} onInputChange={handleTextChange} /&gt;

      {text}
    &lt;/div&gt;
  );
}

// 2
function MyInput({ inputValue, onInputChange }) {
  return (
    &lt;input type=&quot;text&quot; value={inputValue} onChange={onInputChange} /&gt;
  );
}
</code></pre>
<p>回调处理程序在某处定义 (1)，在其他地方使用 (2)，但回调到其定义的位置 (3)。这样，就可以从子组件到父组件进行通信。回调处理程序通过 React props 向下传递，并在调用函数时向上通信。</p>
<p>你已经了解了 React 的事件处理程序、内联事件处理程序和回调事件处理程序，以及如何在按钮中为它们的 onClick 事件和在输入字段中为它们的 onChange 事件使用它们。还有其他事件处理程序，例如表单元素的 onSubmit，实际上需要该事件来阻止本机浏览器行为。无论如何，所有这些事件处理程序都有其特定目的。你的目标应该是让你的代码保持可读性和可维护性，</p>
]]></content>
    </entry>
</feed>